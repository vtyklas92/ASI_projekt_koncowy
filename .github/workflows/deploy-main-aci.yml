name: Zbuduj i Wdróż Aplikację Streamlit na ACI z DVC

on:
  push:
    branches: [ azure_test ] # Upewnij się, że to jest Twój główny branch
  workflow_dispatch:

env:
  # Sekrety i nazwy zdefiniowane w GitHub i Azure
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_REPOSITORY_NAME: ${{ secrets.ACR_REPOSITORY_NAME }}
  ACI_CONTAINER_NAME: ${{ secrets.ACI_CONTAINER_NAME }}
  ACI_DNS_NAME_LABEL: ${{ secrets.ACI_DNS_NAME_LABEL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: '1. Pobierz kod (Checkout)'
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: '2. Konfiguracja środowiska Python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # --- NOWY, W PEŁNI ZAUTOMATYZOWANY KROK DLA DVC ---
    # Ten krok zastępuje Twój skrypt setup_dvc.py
    - name: '3. Zainstaluj DVC, skonfiguruj i pobierz dane'
      env:
        # Bezpiecznie przekazujemy zawartość pliku .json z sekretów
        DVC_JSON_CREDS: ${{ secrets.DVC_CREDENTIALS_JSON }}
      run: |
        # Krok A: Zainstaluj DVC z obsługą Google Drive
        pip install "dvc[gdrive]"
        
        # Krok B: Odtwórz plik credentials.json na maszynie budującej
        echo "$DVC_JSON_CREDS" > dvc_credentials.json
        
        # Krok C: Uruchom komendy konfiguracyjne - DOKŁADNIE tak, jak w Twoim skrypcie
        echo "Konfigurowanie DVC dla Google Drive z użyciem konta usługi..."
        dvc remote modify mygdrive gdrive_use_service_account true --local
        dvc remote modify mygdrive gdrive_service_account_json_file_path dvc_credentials.json --local
        
        # Krok D: Pobierz dane modeli w wersji z najnowszego commita
        echo "Pobieranie danych modeli..."
        dvc pull asi-project/AutogluonModels.dvc --force

    - name: '4. Zaloguj się do Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: '5. Zaloguj się do Azure Container Registry (ACR)'
      run: |
        az acr login --name $ACR_LOGIN_SERVER

    - name: '6. Znajdź najnowszy folder z modelem'
      id: find_model
      run: |
        LATEST_MODEL=$(ls -1 asi-project/AutogluonModels | sort -r | head -n 1)
        echo "Znaleziono najnowszy model do spakowania: $LATEST_MODEL"
        echo "LATEST_MODEL_DIR=$LATEST_MODEL" >> $GITHUB_ENV

    - name: '7. Zbuduj i wypchnij zoptymalizowany obraz Docker'
      run: |
        docker build \
          --build-arg LATEST_MODEL_DIR=${{ env.LATEST_MODEL_DIR }} \
          -f asi-project/Dockerfile \
          -t $ACR_LOGIN_SERVER/$ACR_REPOSITORY_NAME:${{ github.sha }} \
          .
        docker push $ACR_LOGIN_SERVER/$ACR_REPOSITORY_NAME:${{ github.sha }}
        
    - name: '8. Wdróż najnowszy obraz na Azure Container Instances (ACI)'
      run: |
        az container delete --name $ACI_CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes || true
        az container create \
          --resource-group $RESOURCE_GROUP \
          --name $ACI_CONTAINER_NAME \
          --image $ACR_LOGIN_SERVER/$ACR_REPOSITORY_NAME:${{ github.sha }} \
          --dns-name-label $ACI_DNS_NAME_LABEL \
          --ports 8501 \
          --cpu 1 \
          --memory 1.5